use serde::{Deserialize, Serialize};
/*
 * Nnef_PFDmanagement Service API
 *
 * Packet Flow Description Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// PfdContent : Represents the content of a PFD for an application identifier.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PfdContent {
    /// Identifies a PDF of an application identifier.
    #[serde(rename = "pfdId", skip_serializing_if = "Option::is_none")]
    pub pfd_id: Option<String>,
    /// Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic.
    #[serde(rename = "flowDescriptions", skip_serializing_if = "Option::is_none")]
    pub flow_descriptions: Option<Vec<String>>,
    /// Indicates a URL or a regular expression which is used to match the significant parts of the URL.
    #[serde(rename = "urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Vec<String>>,
    /// Indicates an FQDN or a regular expression as a domain name matching criteria.
    #[serde(rename = "domainNames", skip_serializing_if = "Option::is_none")]
    pub domain_names: Option<Vec<String>>,
    #[serde(rename = "dnProtocol", skip_serializing_if = "Option::is_none")]
    pub dn_protocol: Option<Box<crate::DomainNameProtocol>>,
}

impl PfdContent {
    /// Represents the content of a PFD for an application identifier.
    pub fn new() -> PfdContent {
        PfdContent {
            pfd_id: None,
            flow_descriptions: None,
            urls: None,
            domain_names: None,
            dn_protocol: None,
        }
    }
}
